@charset "UTF-8";
#__bs_notify__ {
  pointer-events: none;
  opacity: 0.5; }

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

.Section {
  font-size: 1.6rem;
  margin-bottom: 60px; }
  .Section:before, .Section:after {
    content: "";
    display: table;
    clear: both; }
  .Section p {
    margin-bottom: 36px; }
  @media screen and (max-width: 844px) {
    .Section {
      position: relative; }
      .Section .AnchorTarget {
        position: absolute;
        top: -120px; } }


body .WrapperArea {
  background-color: #fff;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  position: relative; }
  @media screen and (max-width: 844px) {
    body .WrapperArea {
      overflow: hidden; } }
  @media screen and (min-width: 845px) {
    body .WrapperArea {
      min-width: 844px; } }

@media screen and (max-width: 844px) {
  .ContentsArea {
    padding-top: 110px;
    padding-left: 2%;
    padding-right: 2%;
    box-sizing: border-box; } }

@media screen and (min-width: 845px) {
  .ContentsArea {
    width: 100%;
    max-width: 1370px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box; } }

.Layout, .Layout-default {
  margin: 24px 0; }

.Layout-center {
  text-align: center; }


.AlertArea {
  padding: 1em;
  color: #f12309;
  border: solid 1px #F97767;
  box-sizing: border-box;
  background-color: #fee9e7; }

.Heading1 {
  word-wrap: break-word;
  word-break: break-all;
  margin: 0;
  padding: 0;
  line-height: 1.1em;
  font-weight: 700;
  text-align: center; }
  @media screen and (max-width: 844px) {
    .Heading1 {
      margin-bottom: 30px;
      font-size: 3.2rem; } }
  @media screen and (min-width: 845px) {
    .Heading1 {
      margin-bottom: 50px;
      font-size: 3.8rem; } }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@font-face {
  font-family: "pokemoncard-font";
  src: url("/assets/fonts/pokemoncard-font.eot");
  src: url("/assets/fonts/pokemoncard-font.eot?#iefix") format("eot"), url("/assets/fonts/pokemoncard-font.woff") format("woff"), url("/assets/fonts/pokemoncard-font.ttf") format("truetype"), url("/assets/fonts/pokemoncard-font.svg#pokemoncard-font") format("svg");
  font-weight: normal;
  font-style: normal; }

.pcg {
  display: inline-block;
  font-family: "pokemoncard-font";
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.pcg-lg {
  font-size: 1.3333333333333333em;
  line-height: 0.75em;
  vertical-align: -15%; }

.pcg-2x {
  font-size: 2em; }

.pcg-3x {
  font-size: 3em; }

.pcg-4x {
  font-size: 4em; }

.pcg-5x {
  font-size: 5em; }

.pcg-fw {
  width: 1.2857142857142858em;
  text-align: center; }

.pcg-arrow-up:before {
  content: "\F700"; }

.pcg-arrow-rigth:before {
  content: "\F701"; }

.pcg-arrow-down:before {
  content: "\F702"; }

.pcg-arrow-left:before {
  content: "\F703"; }

.pcg-arrow-anchor:before {
  content: "\F704"; }

.pcg-search:before {
  content: "\F705"; }

.pcg-monster-ball:before {
  content: "\F806"; }

.pcg-calendar:before {
  content: "\F807"; }

.pcg-blank:before {
  content: "\F708"; }

.pcg-check:before {
  content: "\F709"; }

.pcg-megamark:before {
  content: "\F70A"; }

.pcg-card:before {
  content: "\F70B"; }

.pcg-prismstar:before {
  content: "\F70C"; }

.pcg-deck:before {
  content: "\F800"; }

.pcg-flag:before {
  content: "\F801"; }

.pcg-pikachu:before {
  content: "\F802"; }

.pcg-cross:before {
  content: "\F803"; }

.pcg-hamburger:before {
  content: "\F804"; }

.pcg-beginner:before {
  content: "\F808"; }

.pcg-monster-ball-v2:before {
  content: "\F806"; }

.pcg-calendar-v2:before {
  content: "\F807"; }

.pcg-beginner-v2:before {
  content: "\F808"; }
